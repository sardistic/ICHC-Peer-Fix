import{mungeSDPPlay}from'./ichcMungeSDP.js';import ichcPeerConnectionPlay from './ichcPeerConnectionPlay.js';class ichcWebRTCPlay{constructor(props){this.state={connectionState:'stopped',videoElementPlay:undefined,sdpURL:'',streamInfo:{applicationName:"",streamName:"",sessionId:"[empty]"},userData:{param1:"value1"}};
this.ichcPeerConnectionPlay=undefined;this.callbacks={};this.newAPI=false;this.errorHandler=this.errorHandler.bind(this);this.onconnectionstatechange=this.onconnectionstatechange.bind(this);this.onstop=this.onstop.bind(this);}setState(newState){let _this=this;return new Promise((resolve,reject)=>{_this.state={..._this.state,...newState};if(_this.callbacks.onStateChanged!=null){_this.callbacks.onStateChanged(_this.state);
}resolve(_this.state);});}getState(){return this.state;}onconnectionstatechange(evt){if(evt.target!=null&&evt.target.connectionState!=null){this.setState({connectionState:evt.target.connectionState});}}onstop(){this.setState({connectionState:'stopped'});}on(_callbacks){this.callbacks=_callbacks;}set(props){let _this=this;return new Promise((resolve,reject)=>{let currentState=_this.getState();
let newStreamInfo={...currentState.streamInfo};let newState={};if(props.videoElementPlay!=null)newState['videoElementPlay']=props.videoElementPlay;if(props.sdpURL!=null)newState['sdpURL']=props.sdpURL.trim();if(props.applicationName!=null)newStreamInfo['applicationName']=props.applicationName.trim();if(props.streamName!=null)newStreamInfo['streamName']=props.streamName.trim();
if(props.sessionId!=null)newStreamInfo['sessionId']=props.sessionId;if(props.streamInfo!=null)newStreamInfo={...newStreamInfo,...props.streamInfo};newState['streamInfo']=newStreamInfo;if(props.userData!=null)newState['userData']={...props.userData};_this.setState(newState).then((s)=>{resolve(s);});});
}getAvailableStreams(){let currentState=this.getState();this.ichcPeerConnectionPlay=new ichcPeerConnectionPlay({sdpURL:currentState.sdpURL,videoElement:currentState.videoElementPlay,streamInfo:currentState.streamInfo,userData:currentState.userData,mungeSDP:mungeSDPPlay,onconnectionstatechange:this.onconnectionstatechange,onstop:this.onstop,onerror:this.errorHandler});return(this.ichcPeerConnectionPlay.getAvailableStreams());
}play(videoElementPlay){let currentState=this.getState();if(!videoElementPlay)videoElementPlay=currentState.videoElementPlay;this.ichcPeerConnectionPlay=new ichcPeerConnectionPlay({sdpURL:currentState.sdpURL,videoElement:videoElementPlay,streamInfo:currentState.streamInfo,userData:currentState.userData,mungeSDP:mungeSDPPlay,onconnectionstatechange:this.onconnectionstatechange,onstop:this.onstop,onerror:this.errorHandler});
this.ichcPeerConnectionPlay.start();}connection(){return this.ichcPeerConnectionPlay;}stop(){try{this.ichcPeerConnectionPlay.stop();this.ichcPeerConnectionPlay=undefined;}catch(e){console.log("ERROR (play-stop): "+e);}}stream_id(){let currentState=this.getState();if(currentState&&currentState.streamInfo){return currentState.streamInfo.streamName;}return "";}errorHandler(error){console.log('ichcWebRTCPlay ERROR:');
console.log(error);try{let m=error.message;if(m.indexOf("stream is not running")>-1){if(window.dropcam)window.dropcam(m);}else{if(window.appendChatText)window.appendChatText("ERROR: "+m);if(window.debugcam)window.debugcam("play "+m);}}catch(e){}if(error.message==null){if(error.target!=null){console.log('typeof error.target: '+typeof error.target);
}}let newError={...error};if(this.callbacks.onError!=null){this.callbacks.onError(newError);}}}export default ichcWebRTCPlay;